import { RealisticSeoAnalyzer } from './seoAnalyzer.js';
// Add this import if you want to use Gemini modal or AI logic
import { runGeminiSeoCheck } from './seoTools.js';
import { showNotification, showSection } from './uiHelpers.js'; // Add showSection for navigation
import { API_BASE } from '../config.js';

// Remove localStorage loading, fetch from backend API instead
export let posts = [];
export let currentEditingPostId = null;

const seoAnalyzer = new RealisticSeoAnalyzer();

// Helper: generate slug from title
function generateSlug(title) {
    return (title || '')
        .toLowerCase()
        .replace(/[^\w‡∏Å-‡πô\s-]+/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
}

export async function loadBlogPosts() {
    try {
        const res = await fetch(`${API_BASE}/posts`);
        if (!res.ok) throw new Error('Failed to fetch posts');
        posts = await res.json();
        console.log('üìã [DEBUG] Loaded posts:', posts);
        // Debug: show structure of first post
        if (posts.length > 0) {
            console.log('üìã [DEBUG] First post structure:', posts[0]);
        }
    } catch (e) {
        console.error('‚ùå [DEBUG] Error loading posts:', e);
        posts = [];
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°', 'error');
    }
    const blogGrid = document.getElementById('blogManageGrid');
    if (!blogGrid) {
        console.error('‚ùå [DEBUG] Blog grid element not found');
        return;
    }
    if (posts.length === 0) {
        blogGrid.innerHTML = `
            <div class="error-container" style="grid-column: 1 / -1;">
                <div style="font-size: 3em;">üìù</div>
                <div class="error-title">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</div>
                <div class="error-message">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
                <button class="btn btn-gemini" onclick="showSection('blog-create')">
                    <i class="fas fa-plus"></i> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                </button>
            </div>
        `;
        return;
    }    // Update post select for SEO analysis
    const postSelect = document.getElementById('postSelectForSeo');
    if (postSelect) {
        postSelect.innerHTML = `
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</option>
            ${posts.map(post => {
                const postId = post.id || post._id || post.postId || post.slug;
                return `<option value="${postId}">${post.titleTH || post.titleth || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}</option>`;
            }).join('')}
        `;
    }// Display posts
    blogGrid.innerHTML = posts.map(post => {
        const analysis = seoAnalyzer.analyzePost(post);
        // Debug log each post structure and ID
        console.log('üîç [DEBUG] Rendering post:', { 
            fullPost: post, 
            id: post.id, 
            title: post.titleTH || post.titleth,
            allKeys: Object.keys(post)
        });
        
        // Try to find the correct ID field
        const postId = post.id || post._id || post.postId || post.slug;
        console.log('üÜî [DEBUG] Using post ID:', postId);
        
        return `
            <div class="blog-card">
                <div class="blog-card-header">
                    <div class="blog-card-title">${post.titleTH || post.titleth || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}</div>
                    <div class="blog-card-meta">
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <span class="status-badge status-${post.status}">${post.status === 'published' ? '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß' : '‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á'}</span>
                            <span class="gemini-badge">üöÄ ${analysis.totalScore}/100</span>
                        </div>
                        <span>${post.updated_at ? new Date(post.updated_at).toLocaleDateString('th-TH') : ''}</span>
                    </div>
                </div>
                <div class="blog-card-body">
                    <div class="blog-card-excerpt">${post.excerpt || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠'}</div>
                    <div style="margin: 10px 0; font-size: 0.85em; color: #6c757d;">
                        <i class="fas fa-user"></i> ${post.author} | 
                        <i class="fas fa-folder"></i> ${post.category || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} |
                        <span style="color: ${analysis.grade.color}">
                            <i class="fas fa-chart-line"></i> Grade ${analysis.grade.grade}
                        </span>
                    </div>
                    <div class="blog-card-actions">
                        <button class="btn btn-primary" onclick="editPost('${postId}')">
                            <i class="fas fa-edit"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </button>
                        <button class="btn btn-gemini" onclick="processAISuggestions('${postId}')">
                            <i class="fas fa-robot"></i> Flash AI
                        </button>
                        <button class="btn btn-secondary" onclick="previewPost('${postId}')">
                            <i class="fas fa-eye"></i> ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </button>
                        <button class="btn btn-danger" onclick="deletePost('${postId}')">
                            <i class="fas fa-trash"></i> ‡∏•‡∏ö
                        </button>
                        ${post.status !== 'published' ? `<button class="btn btn-success" onclick="publishPost('${postId}')"><i class="fas fa-upload"></i> ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà</button>` : ''}
                    </div>
                </div>
            </div>
        `;
    }).join('');
    console.log('‚úÖ [DEBUG] Blog posts loaded successfully');
}

function getInputValue(id) {
    const el = document.getElementById(id);
    if (!el) {
        showNotification(`‡πÑ‡∏°‡πà‡∏û‡∏ö input: ${id}`, 'error');
        throw new Error(`Element not found: ${id}`);
    }
    return el.value;
}
function getContentValue(id) {
    const el = document.getElementById(id);
    if (!el) {
        showNotification(`‡πÑ‡∏°‡πà‡∏û‡∏ö content: ${id}`, 'error');
        throw new Error(`Element not found: ${id}`);
    }
    return el.innerHTML;
}

export async function savePost() {
    console.log('üíæ [DEBUG] Saving post...');
    try {
        let slug = getInputValue('postSlug').trim();
        if (!slug) {
            slug = generateSlug(getInputValue('postTitleTH'));
        }
        let tags = getInputValue('postTags');
        if (typeof tags === 'string') {
            tags = tags.split(',').map(tag => tag.trim()).filter(tag => tag);
        }
        const postData = {
            titleTH: getInputValue('postTitleTH'),
            titleEN: getInputValue('postTitleEN'),
            slug,
            content: getContentValue('postContent'),
            excerpt: getInputValue('postExcerpt'),
            category: getInputValue('postCategory'),
            tags,
            author: getInputValue('postAuthor') || '‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≤‡∏á',
            metaTitle: getInputValue('metaTitle'),
            metaDescription: getInputValue('metaDescription'),
            focuskeyword: getInputValue('focusKeyword'), // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å
            schemaType: getInputValue('schemaType'),
            status: 'draft',
        };
        if (!postData.titleTH || !postData.excerpt) {
            showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠', 'error');
            return;
        }
        let res, savedPost;
        if (currentEditingPostId) {
            postData.id = currentEditingPostId;
            res = await fetch(`${API_BASE}/posts/${currentEditingPostId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(postData)
            });
        } else {
            res = await fetch(`${API_BASE}/posts`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(postData)
            });
        }
        if (!res.ok) throw new Error('Failed to save post');
        savedPost = await res.json();
        currentEditingPostId = savedPost.id;
        // Refresh posts from backend
        await loadBlogPosts();
        // Run SEO analysis
        const analysis = seoAnalyzer.analyzePost(savedPost);
        document.getElementById('createEditTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°';
        showNotification(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! Flash AI Score: ${analysis.totalScore}/100`, 'success');
        return true;
    } catch (error) {
        console.error('‚ùå [DEBUG] Error saving post:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', 'error');
        return false;
    }
}

export async function editPost(id) {
    console.log('‚úèÔ∏è [DEBUG] Editing post with ID:', id);
    try {
        const res = await fetch(`${API_BASE}/posts/${id}`);
        if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°');
        const post = await res.json();
        
        currentEditingPostId = id;
        document.getElementById('postTitleTH').value = post.titleTH || post.titleth || '';
        document.getElementById('postTitleEN').value = post.titleEN || post.titleen || '';
        document.getElementById('postSlug').value = post.slug || '';
        document.getElementById('postContent').innerHTML = post.content || '';
        document.getElementById('postExcerpt').value = post.excerpt || '';
        document.getElementById('postCategory').value = post.category || '';
        document.getElementById('postTags').value = (post.tags || []).join(', ');
        document.getElementById('postAuthor').value = post.author || '';
        document.getElementById('metaTitle').value = post.metaTitle || post.metatitle || '';
        document.getElementById('metaDescription').value = post.metaDescription || post.metadescription || '';
        document.getElementById('focusKeyword').value = post.focusKeyword || post.focuskeyword || '';
        document.getElementById('schemaType').value = post.schemaType || post.schematype || 'Article';
        document.getElementById('createEditTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°';
        showSection('blog-create');
    } catch (e) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', 'error');
    }
}

export function previewPost(id) {
    console.log('üëÅÔ∏è [DEBUG] Previewing post with ID:', id);
    const post = posts.find(p => (p.id || p._id || p.postId || p.slug) === id);
    if (!post) {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', 'error');
        return;
    }
    // Use clean URL structure as confirmed in backend
    window.open(`/blog/${encodeURIComponent(post.slug)}`, '_blank');
}

export async function deletePost(id) {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ?')) return;
    try {
        const res = await fetch(`${API_BASE}/posts/${id}`, { method: 'DELETE' });
        if (!res.ok) throw new Error('Failed to delete');
        showNotification('üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        await loadBlogPosts();
    } catch (e) {
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö publish post
export async function publishPost(id) {
    console.log('üöÄ [DEBUG] Publishing post with ID:', id);
    if (!id || id === 'undefined') {
        showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°', 'error');
        return;
    }
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ?')) return;
    try {
        // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        const resGet = await fetch(`${API_BASE}/posts/${id}`);
        if (!resGet.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°');
        const post = await resGet.json();
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÄ‡∏õ‡πá‡∏ô published
        const updated = { ...post, status: 'published' };
        const res = await fetch(`${API_BASE}/posts/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updated)
        });
        if (!res.ok) throw new Error('Failed to publish');
        showNotification('‚úÖ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        await loadBlogPosts();
    } catch (e) {
        console.error('‚ùå [DEBUG] Error publishing post:', e);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà', 'error');
    }
}

// Example: set the post in the select and run Gemini SEO check
export function processAISuggestions(postId) {
    console.log('ü§ñ [DEBUG] Processing AI suggestions for post ID:', postId);
    const select = document.getElementById('postSelectForSeo');
    if (select) {
        select.value = postId;
        // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤
        const post = posts.find(p => (p.id || p._id || p.postId || p.slug) === postId);
        if (!post) {
            showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'error');
            return;
        }
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á analysis ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î prompt)
        const analysis = seoAnalyzer.analyzePost(post);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ title, excerpt, focuskeyword)
        const safePrompt = `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SEO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°: ${post.titleTH || ''}\n- Focus Keyword: ${post.focuskeyword || ''}\n- ‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠: ${post.excerpt || ''}`;
        console.log('Prompt for Gemini:', safePrompt); // log prompt ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡∏î‡πâ‡∏ß‡∏¢ prompt ‡∏™‡∏±‡πâ‡∏ô (‡∏ú‡πà‡∏≤‡∏ô runGeminiSeoCheck ‡∏´‡∏£‡∏∑‡∏≠ Gemini20FlashEngine ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
        if (typeof window.Gemini20FlashEngine === 'function') {
            const engine = new window.Gemini20FlashEngine({ apiKey: window.geminiApiKey });
            engine.callGeminiAPI(safePrompt)
                .then(result => {
                    showNotification('AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SEO ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥ result ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
                })
                .catch(err => {
                    showNotification('AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SEO ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'error');
                });
        } else {
            runGeminiSeoCheck(); // fallback ‡πÄ‡∏î‡∏¥‡∏°
        }
    } else {
        if (typeof showNotification === 'function') {
            showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SEO', 'error');
        }
    }
}