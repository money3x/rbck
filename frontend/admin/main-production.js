// ===== PRODUCTION-READY RBCK CMS ADMIN PANEL =====
// All-in-one JavaScript file for production deployment
// No ES6 modules, all functions available in global scope

console.log('üöÄ [MAIN] Loading RBCK CMS Admin Panel...');

// ===== CONFIGURATION =====
// Smart configuration ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö environment ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const config = {
    apiBase: (() => {
        const hostname = window.location.hostname;
        const port = window.location.port;
        const protocol = window.location.protocol;
        
        console.log('üîç [CONFIG] Detecting environment...');
        console.log('üîç [CONFIG] Hostname:', hostname);
        console.log('üîç [CONFIG] Port:', port);
        console.log('üîç [CONFIG] Protocol:', protocol);
          // Local development (localhost with any port)
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            console.log('üè† [CONFIG] Local development detected');
            return 'http://localhost:10000/api';  // ‚úÖ ‡πÉ‡∏ä‡πâ port 10000 ‡∏ï‡∏≤‡∏° backend
        }
        
        // Check if we're on Netlify (frontend) calling Render (backend)
        if (hostname.includes('netlify.app') || hostname.includes('rbck')) {
            console.log('‚òÅÔ∏è [CONFIG] Production (Netlify->Render) detected');
            return 'https://rbck.onrender.com/api';
        }
        
        // Fallback for production
        console.log('üåê [CONFIG] Production fallback');
        return 'https://rbck.onrender.com/api';
    })(),
    version: '2025-06-19-production-v2'
};

console.log('üîß [CONFIG] API Base:', config.apiBase);

// ===== GLOBAL VARIABLES =====
let currentUser = null;
let authToken = localStorage.getItem('authToken');
let aiSwarmCouncil = null;
let isAppInitialized = false;

// ===== AI PROVIDERS DATA =====
const AI_PROVIDERS = [
    {
        id: 'gemini',
        name: 'Gemini 2.0 Flash',
        type: 'Google AI',
        icon: '‚ö°',
        role: '‡∏ô‡∏±‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏´‡∏•‡∏±‡∏Å',
        specialties: ['‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤', '‡∏õ‡∏£‡∏±‡∏ö SEO', '‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤'],
        description: 'AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á SEO ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
    },
    {
        id: 'openai',
        name: 'OpenAI GPT',
        type: 'OpenAI',
        icon: 'üß†',
        role: '‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
        specialties: ['‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á'],
        description: 'AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô'
    },
    {
        id: 'claude',
        name: 'Claude AI',
        type: 'Anthropic',
        icon: 'üé≠',
        role: '‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤',
        specialties: ['‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à'],
        description: 'AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤'
    },
    {
        id: 'deepseek',
        name: 'DeepSeek AI',
        type: 'DeepSeek AI',
        icon: 'üîç',
        role: '‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ',
        specialties: ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û'],
        description: 'AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö'
    },
    {
        id: 'chindax',
        name: 'ChindaX AI',
        type: 'ChindaX',
        icon: 'üß†',
        role: '‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏©‡∏≤',
        specialties: ['‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤', '‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢'],
        description: 'AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢'
    }
];

// ===== UTILITY FUNCTIONS =====
async function apiRequest(endpoint, options = {}) {
    const url = `${config.apiBase}${endpoint}`;
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
        }
    };
    
    if (authToken) {
        defaultOptions.headers['Authorization'] = `Bearer ${authToken}`;
    }
    
    const finalOptions = { ...defaultOptions, ...options };
    
    try {
        console.log(`üîÑ [API] ${finalOptions.method || 'GET'} ${url}`);
        const response = await fetch(url, finalOptions);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log(`‚úÖ [API] Response:`, data);
        return data;
    } catch (error) {
        console.error(`‚ùå [API] Error:`, error);
        throw error;
    }
}

// ===== NOTIFICATION SYSTEM =====
window.showNotification = function(message, type = 'info') {
    console.log(`üì¢ [NOTIFICATION] [${type}]:`, message);
    
    // Remove existing notifications
    document.querySelectorAll('.notification').forEach(n => n.remove());
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : type === 'warning' ? '#ff9800' : '#2196f3'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 10000;
        font-family: 'Sarabun', sans-serif;
        font-size: 14px;
        max-width: 350px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    `;
    
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    notification.innerHTML = `${icon} ${message}`;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Auto remove
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
};

// ===== NAVIGATION SYSTEM =====
window.showSection = function(sectionId) {
    console.log('üîÑ [NAV] Showing section:', sectionId);
    
    try {
        // Hide all sections
        document.querySelectorAll('.content-section, .section').forEach(section => {
            section.classList.remove('active');
            section.style.display = 'none';
        });
        
        // Remove active class from all nav links
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        
        // Show selected section
        const selectedSection = document.getElementById(sectionId);
        if (selectedSection) {
            selectedSection.classList.add('active');
            selectedSection.style.display = 'block';
            console.log('‚úÖ [NAV] Section shown:', sectionId);
        } else {
            console.error('‚ùå [NAV] Section not found:', sectionId);
            showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ' + sectionId, 'error');
            return;
        }
        
        // Update active nav link
        const navLink = document.querySelector(`.nav-link[onclick*="${sectionId}"]`);
        if (navLink) {
            navLink.classList.add('active');
        }
        
        // Update page title
        const pageTitle = document.getElementById('pageTitle');
        if (pageTitle) {
            let title = '';
            switch(sectionId) {
                case 'dashboard':
                    title = 'üöÄ Gemini 2.0 Flash Dashboard';
                    loadDashboard();
                    break;
                case 'blog-manage':
                    title = '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°';
                    loadPosts();
                    break;
                case 'blog-create':
                    title = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà';
                    break;
                case 'seo-tools':
                    title = 'üöÄ Gemini 2.0 SEO Tools';
                    break;
                case 'analytics':
                    title = 'üìä Flash Analytics';
                    loadAnalytics();
                    break;
                case 'ai-swarm':
                    title = 'ü§ñ AI Swarm Council';
                    loadAISwarmData();
                    break;
                case 'ai-monitoring':
                    title = 'üìä AI Monitoring';
                    break;
                case 'migration':
                    title = 'üîÑ Migration';
                    break;
                default:
                    title = sectionId.charAt(0).toUpperCase() + sectionId.slice(1);
            }
            pageTitle.textContent = title;
        }
        
    } catch (error) {
        console.error('‚ùå [NAV] Error in showSection:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ' + error.message, 'error');
    }
};

// ===== AI SWARM COUNCIL FUNCTIONS =====
window.loadAISwarmData = function() {
    console.log('üìä [AI SWARM] Loading AI Swarm data...');
    forceRenderAIProviders();
};

window.forceRenderAIProviders = function() {
    console.log('üîÑ [AI SWARM] Force rendering AI Providers...');
    
    const tableBody = document.getElementById('aiProvidersTableBody');
    if (!tableBody) {
        console.error('‚ùå [AI SWARM] aiProvidersTableBody not found');
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á AI Providers', 'error');
        return;
    }
    
    tableBody.innerHTML = '';
    
    AI_PROVIDERS.forEach(provider => {
        const row = document.createElement('tr');
        row.className = 'provider-row';
        row.id = `provider-${provider.id}`;
        
        const specialtyTags = provider.specialties.map(spec => 
            `<span class="specialty-tag">${spec}</span>`
        ).join('');
        
        row.innerHTML = `
            <td>
                <div class="provider-info">
                    <span class="provider-icon">${provider.icon}</span>
                    <div>
                        <div class="provider-name">${provider.name}</div>
                        <div class="provider-role">${provider.role}</div>
                    </div>
                </div>
            </td>
            <td>
                <span class="status-indicator status-checking" id="status-${provider.id}">
                    <i class="fas fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                </span>
            </td>
            <td>${provider.role}</td>
            <td>
                <div class="provider-specialties">
                    ${specialtyTags}
                </div>
            </td>
        `;
        
        tableBody.appendChild(row);
    });
    
    console.log('‚úÖ [AI SWARM] AI Providers rendered successfully');
    showNotification('‚úÖ ‡πÅ‡∏™‡∏î‡∏á AI Providers ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
    
    // Check status after rendering
    setTimeout(() => {
        checkAIProvidersStatus();
    }, 1000);
};

async function checkAIProvidersStatus() {
    console.log('üîç [AI SWARM] Checking AI Providers status...');
    
    for (const provider of AI_PROVIDERS) {
        const statusElement = document.getElementById(`status-${provider.id}`);
        if (!statusElement) continue;
        
        try {
            // Try to check real status from backend
            const response = await fetch(`${config.apiBase}/ai/status`);
            if (response.ok) {
                const data = await response.json();
                const providerStatus = data.providers?.[provider.id];
                
                if (providerStatus?.status === 'connected' || providerStatus?.available) {
                    statusElement.innerHTML = '<i class="fas fa-check-circle"></i> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
                    statusElement.className = 'status-indicator status-connected';
                } else {
                    statusElement.innerHTML = '<i class="fas fa-times-circle"></i> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
                    statusElement.className = 'status-indicator status-disconnected';
                }
            } else {
                throw new Error('API not available');
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è [AI SWARM] Could not check ${provider.id} status:`, error.message);
            // Show disconnected status
            statusElement.innerHTML = '<i class="fas fa-times-circle"></i> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
            statusElement.className = 'status-indicator status-disconnected';
        }
    }
    
    console.log('‚úÖ [AI SWARM] Status check completed');
}

window.refreshAISwarmProviders = function() {
    console.log('üîÑ [AI SWARM] Refreshing AI Swarm providers...');
    showNotification('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AI Providers...', 'info');
    
    setTimeout(() => {
        forceRenderAIProviders();
    }, 500);
};

window.debugAISwarm = function() {
    console.log('üîç [AI SWARM] Debug Info:');
    console.log('- AI_PROVIDERS count:', AI_PROVIDERS.length);
    console.log('- forceRenderAIProviders type:', typeof window.forceRenderAIProviders);
    console.log('- refreshAISwarmProviders type:', typeof window.refreshAISwarmProviders);
    
    const tableBody = document.getElementById('aiProvidersTableBody');
    console.log('- aiProvidersTableBody exists:', !!tableBody);
    if (tableBody) {
        console.log('- current table rows:', tableBody.children.length);
    }
    
    showNotification('üêõ Debug info ‡∏î‡∏π‡πÉ‡∏ô Console (F12)', 'info');
};

// ===== DASHBOARD FUNCTIONS =====
async function loadDashboard() {
    console.log('üìä [DASHBOARD] Loading dashboard...');
    
    try {
        const [healthResponse, postsResponse] = await Promise.allSettled([
            apiRequest('/health'),
            apiRequest('/posts')
        ]);
        
        // Update system status
        if (healthResponse.status === 'fulfilled') {
            const health = healthResponse.value;
            const statusElement = document.getElementById('system-status');
            if (statusElement) {
                statusElement.textContent = health.status || 'unknown';
                statusElement.className = `status-${health.status}`;
            }
        }
        
        // Update posts count
        if (postsResponse.status === 'fulfilled' && postsResponse.value.success) {
            const posts = postsResponse.value.data || [];
            const totalElement = document.getElementById('total-posts');
            if (totalElement) {
                totalElement.textContent = posts.length;
            }
        }
        
        console.log('‚úÖ [DASHBOARD] Dashboard loaded');
    } catch (error) {
        console.error('‚ùå [DASHBOARD] Error loading dashboard:', error);
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡πÑ‡∏î‡πâ', 'error');
    }
}

// ===== POSTS FUNCTIONS =====
async function loadPosts() {
    console.log('üìù [POSTS] Loading posts...');
    
    try {
        const response = await apiRequest('/posts');
        const postsContainer = document.getElementById('posts-list');
        
        if (!postsContainer) {
            console.warn('‚ö†Ô∏è [POSTS] posts-list container not found');
            return;
        }
        
        if (response.success && response.data && response.data.length > 0) {
            postsContainer.innerHTML = response.data.map(post => `
                <div class="post-item" data-id="${post.id}">
                    <h3>${post.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}</h3>
                    <p>${(post.content || '').substring(0, 100)}${post.content && post.content.length > 100 ? '...' : ''}</p>
                    <div class="post-meta">
                        <span>‡πÇ‡∏î‡∏¢: ${post.author || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</span>
                        <span>${post.created_at ? new Date(post.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'}</span>
                        <span class="status ${post.published ? 'published' : 'draft'}">
                            ${post.published ? '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß' : '‡∏£‡πà‡∏≤‡∏á'}
                        </span>
                    </div>
                    <div class="post-actions">
                        <button onclick="editPost(${post.id})" class="btn-edit">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                        <button onclick="deletePost(${post.id})" class="btn-delete">‡∏•‡∏ö</button>
                    </div>
                </div>
            `).join('');
        } else {
            postsContainer.innerHTML = '<div class="no-data"><p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå</p></div>';
        }
        
        console.log('‚úÖ [POSTS] Posts loaded successfully');
    } catch (error) {
        console.error('‚ùå [POSTS] Error loading posts:', error);
        const postsContainer = document.getElementById('posts-list');
        if (postsContainer) {
            postsContainer.innerHTML = '<div class="error"><p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ</p></div>';
        }
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ', 'error');
    }
}

// ===== ANALYTICS FUNCTIONS =====
async function loadAnalytics() {
    console.log('üìä [ANALYTICS] Loading analytics...');
    
    try {
        const [healthResponse, cacheResponse] = await Promise.allSettled([
            apiRequest('/health'),
            apiRequest('/cache/stats')
        ]);
        
        // Update system metrics
        if (healthResponse.status === 'fulfilled') {
            const health = healthResponse.value;
            updateElement('systemStatus', health.status || 'unknown');
            updateElement('uptime', health.uptime ? `${Math.floor(health.uptime / 3600)}h ${Math.floor((health.uptime % 3600) / 60)}m` : '0h 0m');
            updateElement('memoryUsage', health.memory ? `${health.memory.used}MB / ${health.memory.total}MB` : 'N/A');
            updateElement('databaseStatus', health.database || 'unknown');
        }
        
        // Update cache metrics
        if (cacheResponse.status === 'fulfilled' && cacheResponse.value.success) {
            const cache = cacheResponse.value.data;
            let totalKeys = 0;
            let totalHits = 0;
            let totalMisses = 0;
            
            Object.values(cache).forEach(cacheData => {
                if (typeof cacheData === 'object' && cacheData.keys !== undefined) {
                    totalKeys += cacheData.keys || 0;
                    totalHits += cacheData.hits || 0;
                    totalMisses += cacheData.misses || 0;
                }
            });
            
            const hitRate = totalHits + totalMisses > 0 ? 
                ((totalHits / (totalHits + totalMisses)) * 100).toFixed(1) : '0.0';
            
            updateElement('cacheHitRate', `${hitRate}%`);
            updateElement('cacheSize', totalKeys.toString());
            updateElement('cacheKeys', totalKeys.toString());
        }
        
        console.log('‚úÖ [ANALYTICS] Analytics loaded successfully');
    } catch (error) {
        console.error('‚ùå [ANALYTICS] Error loading analytics:', error);
        showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ', 'error');
    }
}

function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

// ===== BLOG MANAGEMENT FUNCTIONS =====
window.loadBlogPosts = async function() {
    console.log('üìù [BLOG] Loading blog posts...');
    
    try {
        const response = await apiRequest('/posts');
        const postsContainer = document.getElementById('posts-list');
        
        if (!postsContainer) {
            console.warn('‚ö†Ô∏è [BLOG] posts-list container not found');
            showNotification('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Posts', 'warning');
            return;
        }
        
        if (response.success && response.data && response.data.length > 0) {
            postsContainer.innerHTML = response.data.map(post => `
                <div class="post-item" data-id="${post.id}">
                    <h3>${post.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}</h3>
                    <p>${(post.content || '').substring(0, 100)}${post.content && post.content.length > 100 ? '...' : ''}</p>
                    <div class="post-meta">
                        <span>‡πÇ‡∏î‡∏¢: ${post.author || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</span>
                        <span>${post.created_at ? new Date(post.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'}</span>
                        <span class="status ${post.published ? 'published' : 'draft'}">
                            ${post.published ? '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß' : '‡∏£‡πà‡∏≤‡∏á'}
                        </span>
                    </div>
                    <div class="post-actions">
                        <button onclick="editPost(${post.id})" class="btn-edit">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                        <button onclick="deletePost(${post.id})" class="btn-delete">‡∏•‡∏ö</button>
                    </div>
                </div>
            `).join('');
            
            console.log(`‚úÖ [BLOG] Loaded ${response.data.length} posts`);
            showNotification(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î ${response.data.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
        } else {
            postsContainer.innerHTML = '<div class="no-data"><p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå</p></div>';
            console.log('üìù [BLOG] No posts found');
            showNotification('üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå', 'info');
        }
        
    } catch (error) {
        console.error('‚ùå [BLOG] Error loading posts:', error);
        const postsContainer = document.getElementById('posts-list');
        if (postsContainer) {
            postsContainer.innerHTML = '<div class="error"><p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ</p></div>';
        }
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ: ' + error.message, 'error');
    }
};

window.savePost = async function() {
    console.log('üíæ [BLOG] Saving post...');
    
    try {
        const titleElement = document.getElementById('postTitle');
        const contentElement = document.getElementById('postContent');
        const publishedElement = document.getElementById('postPublished');
        
        if (!titleElement || !contentElement) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå');
        }
        
        const postData = {
            title: titleElement.value.trim(),
            content: contentElement.value.trim(),
            published: publishedElement ? publishedElement.checked : false
        };
        
        // Validation
        if (!postData.title) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå');
        }
        
        if (!postData.content) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå');
        }
        
        showNotification('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå...', 'info');
        
        const response = await apiRequest('/posts', {
            method: 'POST',
            body: JSON.stringify(postData)
        });
        
        if (response.success) {
            console.log('‚úÖ [BLOG] Post saved successfully');
            showNotification('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
            clearForm();
            
            // Switch to blog manage section and reload posts
            showSection('blog-manage');
            setTimeout(() => {
                loadBlogPosts();
            }, 500);
        } else {
            throw new Error(response.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ');
        }
        
    } catch (error) {
        console.error('‚ùå [BLOG] Error saving post:', error);
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ: ' + error.message, 'error');
    }
};

window.clearForm = function() {
    console.log('üßπ [BLOG] Clearing form...');
    
    try {
        const titleElement = document.getElementById('postTitle');
        const contentElement = document.getElementById('postContent');
        const publishedElement = document.getElementById('postPublished');
        
        if (titleElement) titleElement.value = '';
        if (contentElement) contentElement.value = '';
        if (publishedElement) publishedElement.checked = false;
        
        console.log('‚úÖ [BLOG] Form cleared');
        showNotification('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        
    } catch (error) {
        console.error('‚ùå [BLOG] Error clearing form:', error);
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ: ' + error.message, 'error');
    }
};

// ===== ADDITIONAL MISSING FUNCTIONS =====
window.exportData = function() {
    console.log('üì§ [EXPORT] Exporting data...');
    showNotification('üì§ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'info');
};

window.formatText = function(command) {
    console.log('üìù [EDITOR] Format text:', command);
    try {
        document.execCommand(command, false, null);
    } catch (error) {
        console.warn('‚ö†Ô∏è [EDITOR] Format command failed:', error);
    }
};

window.insertHeading = function() {
    console.log('üìù [EDITOR] Insert heading...');
    try {
        const text = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:');
        if (text) {
            document.execCommand('insertHTML', false, `<h3>${text}</h3>`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è [EDITOR] Insert heading failed:', error);
    }
};

window.insertList = function() {
    console.log('üìù [EDITOR] Insert list...');
    try {
        document.execCommand('insertUnorderedList', false, null);
    } catch (error) {
        console.warn('‚ö†Ô∏è [EDITOR] Insert list failed:', error);
    }
};

window.insertLink = function() {
    console.log('üìù [EDITOR] Insert link...');
    try {
        const url = prompt('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ URL:');
        if (url) {
            document.execCommand('createLink', false, url);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è [EDITOR] Insert link failed:', error);
    }
};

window.showArticleIdeaModal = function() {
    console.log('üí° [GEMINI] Show article idea modal...');
    showNotification('üí° Gemini Article Ideas ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'info');
};

window.autoGenerateContent = function() {
    console.log('ü§ñ [GEMINI] Auto generate content...');
    showNotification('ü§ñ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'info');
};

window.toggleSidebar = function() {
    console.log('üì± [UI] Toggle sidebar...');
    const sidebar = document.querySelector('.sidebar');
    if (sidebar) {
        sidebar.classList.toggle('mobile-open');
    }
};

// Update function list in initialization
window.debugFunctions = function() {
    console.log('üîç [DEBUG] Available functions:', {
        // Navigation & Core
        showSection: typeof window.showSection,
        showNotification: typeof window.showNotification,
        
        // Blog Management
        loadBlogPosts: typeof window.loadBlogPosts,
        savePost: typeof window.savePost,
        clearForm: typeof window.clearForm,
        editPost: typeof window.editPost,
        deletePost: typeof window.deletePost,
        
        // AI Swarm
        loadAISwarmData: typeof window.loadAISwarmData,
        forceRenderAIProviders: typeof window.forceRenderAIProviders,
        refreshAISwarmProviders: typeof window.refreshAISwarmProviders,
        debugAISwarm: typeof window.debugAISwarm,
        
        // Editor Functions
        formatText: typeof window.formatText,
        insertHeading: typeof window.insertHeading,
        insertList: typeof window.insertList,
        insertLink: typeof window.insertLink,
        
        // Gemini Functions
        showArticleIdeaModal: typeof window.showArticleIdeaModal,
        autoGenerateContent: typeof window.autoGenerateContent,
        
        // UI Functions
        toggleSidebar: typeof window.toggleSidebar,
        exportData: typeof window.exportData,
        logout: typeof window.logout
    });
    
    showNotification('üîç Check console for function debug info', 'info');
};

// ===== INITIALIZATION =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ [INIT] DOM loaded, initializing admin panel...');
    
    // Check if all required elements exist
    const requiredElements = ['dashboard'];
    const missingElements = [];
    
    requiredElements.forEach(id => {
        if (!document.getElementById(id)) {
            missingElements.push(id);
        }
    });
    
    if (missingElements.length > 0) {
        console.warn('‚ö†Ô∏è [INIT] Missing elements:', missingElements);
    }
    
    // Initialize default view
    showSection('dashboard');
      console.log('‚úÖ [INIT] Admin panel initialized successfully');
    console.log('‚úÖ [INIT] Available functions:', {
        // Navigation & Core
        showSection: typeof window.showSection,
        showNotification: typeof window.showNotification,
        
        // Blog Management  
        loadBlogPosts: typeof window.loadBlogPosts,
        savePost: typeof window.savePost,
        clearForm: typeof window.clearForm,
        editPost: typeof window.editPost,
        deletePost: typeof window.deletePost,
        
        // AI Swarm
        forceRenderAIProviders: typeof window.forceRenderAIProviders,
        refreshAISwarmProviders: typeof window.refreshAISwarmProviders,
        debugAISwarm: typeof window.debugAISwarm,
        loadAISwarmData: typeof window.loadAISwarmData,
        
        // Additional Functions
        toggleSidebar: typeof window.toggleSidebar,
        exportData: typeof window.exportData,
        logout: typeof window.logout,
        debugFunctions: typeof window.debugFunctions
    });
    
    showNotification('üöÄ RBCK CMS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'success');
    isAppInitialized = true;
});

console.log('‚úÖ [MAIN] Production-ready RBCK CMS loaded successfully');
