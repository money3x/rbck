// Emergency fix for ReferenceError: showSection is not defined
// This file ensures critical functions are available immediately

console.log('üö® [DEBUG-FIX] Loading emergency functions...');

// Critical showSection function
window.showSection = function(sectionId) {
    console.log('üîÑ [DEBUG-FIX] Showing section:', sectionId);
    
    try {
        // Hide all sections
        document.querySelectorAll('.content-section, .section').forEach(section => {
            section.classList.remove('active');
            section.style.display = 'none';
        });
        
        // Remove active class from all nav links
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        
        // Show selected section
        const selectedSection = document.getElementById(sectionId);
        if (selectedSection) {
            selectedSection.classList.add('active');
            selectedSection.style.display = 'block';
            console.log('‚úÖ [DEBUG-FIX] Section shown:', sectionId);
        } else {
            console.error('‚ùå [DEBUG-FIX] Section not found:', sectionId);
        }
        
        // Update active nav link
        const navLink = document.querySelector(`.nav-link[onclick*="${sectionId}"]`);
        if (navLink) {
            navLink.classList.add('active');
        }
        
        // Update page title
        const pageTitle = document.getElementById('pageTitle');
        if (pageTitle) {
            let title = '';
            switch(sectionId) {
                case 'dashboard':
                    title = 'üöÄ Gemini 2.0 Flash Dashboard';
                    break;
                case 'blog-manage':
                    title = '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°';
                    break;
                case 'blog-create':
                    title = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà';
                    break;
                case 'seo-tools':
                    title = 'üöÄ Gemini 2.0 SEO Tools';
                    break;
                case 'analytics':
                    title = 'üìä Flash Analytics';
                    // Load analytics data
                    if (typeof window.loadAnalytics === 'function') {
                        window.loadAnalytics();
                    }
                    break;                case 'ai-swarm':
                    title = 'ü§ñ AI Swarm Council';
                    // Load AI Swarm data if available
                    console.log('üîÑ [DEBUG-FIX] Loading AI Swarm Council...');
                    setTimeout(() => {
                        if (typeof window.loadAISwarmData === 'function') {
                            console.log('‚úÖ [DEBUG-FIX] Calling loadAISwarmData...');
                            window.loadAISwarmData();
                        } else if (typeof window.forceRenderAIProviders === 'function') {
                            console.log('‚úÖ [DEBUG-FIX] Calling forceRenderAIProviders...');
                            window.forceRenderAIProviders();
                        } else {
                            console.log('‚ö†Ô∏è [DEBUG-FIX] No AI Swarm functions available, showing fallback...');
                            // Show fallback message
                            const tableBody = document.getElementById('aiProvidersTableBody');
                            if (tableBody) {
                                tableBody.innerHTML = `
                                    <tr>
                                        <td colspan="4" style="text-align: center; padding: 20px;">
                                            <i class="fas fa-robot" style="font-size: 2em; color: #ccc; margin-bottom: 10px;"></i>
                                            <p>AI Swarm Council ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
                                            <p><small>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</small></p>
                                        </td>
                                    </tr>
                                `;
                            }
                        }
                    }, 500);
                    break;
                case 'ai-monitoring':
                    title = 'üìä AI Monitoring';
                    break;
                case 'migration':
                    title = 'üîÑ Migration';
                    break;
                default:
                    title = sectionId.charAt(0).toUpperCase() + sectionId.slice(1);
            }
            pageTitle.textContent = title;
        }
        
    } catch (error) {
        console.error('‚ùå [DEBUG-FIX] Error in showSection:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ' + error.message);
    }
};

// Essential notification function
window.showNotification = function(message, type = 'info') {
    console.log(`üì¢ [DEBUG-FIX] Notification [${type}]:`, message);
    
    // Remove existing notifications
    document.querySelectorAll('.notification').forEach(n => n.remove());
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : type === 'warning' ? '#ff9800' : '#2196f3'};
        color: white;
        padding: 12px 20px;
        border-radius: 4px;
        z-index: 10000;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Auto remove
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
};

// Essential functions for HTML onclick handlers
window.loadBlogPosts = function() {
    console.log('üìù [DEBUG-FIX] Loading blog posts...');
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°...', 'info');
};

window.savePost = function() {
    console.log('üíæ [DEBUG-FIX] Saving post...');
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°...', 'info');
};

window.editPost = function(id) {
    console.log('‚úèÔ∏è [DEBUG-FIX] Editing post:', id);
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°...', 'info');
};

window.deletePost = function(id) {
    if (confirm('‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ?')) {
        console.log('üóëÔ∏è [DEBUG-FIX] Deleting post:', id);
        showNotification('‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
    }
};

window.publishPost = function() {
    console.log('üöÄ [DEBUG-FIX] Publishing post...');
    showNotification('‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
};

window.clearForm = function() {
    console.log('üßπ [DEBUG-FIX] Clearing form...');
    const forms = document.querySelectorAll('form');
    forms.forEach(form => form.reset());
    showNotification('‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
};

window.toggleSidebar = function() {
    console.log('üì± [DEBUG-FIX] Toggling sidebar...');
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
        sidebar.classList.toggle('mobile-open');
    }
};

window.logout = function() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        console.log('üö™ [DEBUG-FIX] Logging out...');
        showNotification('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'info');
        // Add actual logout logic here
    }
};

// AI and modal functions
window.openAiSettingsModal = function() {
    console.log('‚öôÔ∏è [DEBUG-FIX] Opening AI settings modal...');
    showNotification('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ', 'info');
};

window.closeAiSettingsModal = function() {
    console.log('‚ùå [DEBUG-FIX] Closing AI settings modal...');
    const modal = document.getElementById('aiSettingsModal');
    if (modal) {
        modal.style.display = 'none';
    }
};

window.saveAiApiKey = function() {
    console.log('üíæ [DEBUG-FIX] Saving AI API key...');
    showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å API Key ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
};

window.testApiKey = function(provider) {
    console.log('üß™ [DEBUG-FIX] Testing API key for:', provider);
    showNotification(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${provider} API Key...`, 'info');
};

window.refreshAnalytics = function() {
    console.log('üîÑ [DEBUG-FIX] Refreshing analytics...');
    showNotification('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
};

window.loadAnalytics = function() {
    console.log('üìä [DEBUG-FIX] Loading analytics...');
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...', 'info');
};

// ===== AI SWARM EMERGENCY FUNCTIONS =====
window.forceRenderAIProviders = function() {
    console.log('üîÑ [DEBUG-FIX] Force rendering AI Providers...');
    
    const tableBody = document.getElementById('aiProvidersTableBody');
    if (!tableBody) {
        console.error('‚ùå [DEBUG-FIX] aiProvidersTableBody not found');
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á AI Providers', 'error');
        return;
    }
    
    // Create the 5 AI providers
    const providers = [
        {
            key: 'gemini',
            name: 'Gemini 2.0 Flash',
            type: 'Google AI',
            icon: '‚ö°',
            status: false,
            role: '‡∏ô‡∏±‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏´‡∏•‡∏±‡∏Å',
            expertise: ['‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤', '‡∏õ‡∏£‡∏±‡∏ö SEO', '‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤']
        },
        {
            key: 'openai',
            name: 'OpenAI GPT',
            type: 'OpenAI',
            icon: 'üß†',
            status: false,
            role: '‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
            expertise: ['‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á']
        },
        {
            key: 'claude',
            name: 'Claude AI',
            type: 'Anthropic',
            icon: 'üé≠',
            status: false,
            role: '‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤',
            expertise: ['‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à']
        },
        {
            key: 'deepseek',
            name: 'DeepSeek AI',
            type: 'DeepSeek AI',
            icon: 'üîç',
            status: false,
            role: '‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ',
            expertise: ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û']
        },
        {
            key: 'chinda',
            name: 'ChindaX AI',
            type: 'ChindaX',
            icon: 'üß†',
            status: false,
            role: '‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏©‡∏≤',
            expertise: ['‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤', '‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢']
        }
    ];
    
    tableBody.innerHTML = '';
    
    providers.forEach(provider => {
        const row = document.createElement('tr');
        row.className = `provider-row ${provider.key} ${provider.status ? 'connected' : 'disconnected'}`;
        row.id = `provider-${provider.key}`;
        
        row.innerHTML = `
            <td data-label="‡πÇ‡∏°‡πÄ‡∏î‡∏• AI">
                <div class="provider-info">
                    <div class="provider-icon">${provider.icon}</div>
                    <div class="provider-details">
                        <h4>${provider.name}</h4>
                        <p class="provider-model">${provider.type}</p>
                    </div>
                </div>
            </td>
            <td data-label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" id="status-${provider.key}">
                <div class="provider-status">
                    <div class="status-dot ${provider.status ? 'connected' : 'disconnected'}"></div>
                    <span class="status-text ${provider.status ? 'connected' : 'disconnected'}">
                        ${provider.status ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
                    </span>
                </div>
            </td>
            <td data-label="‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô">
                <div class="provider-role">${provider.role}</div>
            </td>
            <td data-label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç">
                <div class="provider-expertise">
                    ${provider.expertise.map(exp => `<span class="expertise-tag">${exp}</span>`).join('')}
                </div>
            </td>
        `;
        
        tableBody.appendChild(row);
    });
    
    console.log('‚úÖ [DEBUG-FIX] AI Providers rendered successfully');
    showNotification('‚úÖ ‡πÅ‡∏™‡∏î‡∏á AI Providers ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
};

window.refreshAISwarmProviders = function() {
    console.log('üîÑ [DEBUG-FIX] Refreshing AI Swarm providers...');
    showNotification('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AI Providers...', 'info');
    
    // Try to use main.js function first
    if (window.aiSwarmCouncil && typeof window.aiSwarmCouncil.updateProviderStatus === 'function') {
        window.aiSwarmCouncil.updateProviderStatus()
            .then(() => {
                showNotification('‚úÖ AI Providers ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
            })
            .catch(error => {
                console.error('‚ùå Error refreshing:', error);
                showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AI Providers ‡πÑ‡∏î‡πâ', 'error');
            });
    } else {
        // Fallback to force render
        setTimeout(() => {
            window.forceRenderAIProviders();
        }, 500);
    }
};

window.debugAISwarm = function() {
    console.log('üîç [DEBUG-FIX] AI Swarm Debug Info:');
    console.log('- aiSwarmCouncil exists:', !!window.aiSwarmCouncil);
    console.log('- loadAISwarmData exists:', typeof window.loadAISwarmData);
    console.log('- forceRenderAIProviders exists:', typeof window.forceRenderAIProviders);
    console.log('- refreshAISwarmProviders exists:', typeof window.refreshAISwarmProviders);
    
    const tableBody = document.getElementById('aiProvidersTableBody');
    console.log('- aiProvidersTableBody exists:', !!tableBody);
    if (tableBody) {
        console.log('- current table content length:', tableBody.innerHTML.length);
    }
    
    showNotification('üêõ Debug info ‡∏î‡∏π‡πÉ‡∏ô Console', 'info');
};

window.loadAISwarmData = function() {
    console.log('üìä [DEBUG-FIX] Loading AI Swarm data...');
    
    // Try to use the main function, otherwise use force render
    if (window.aiSwarmCouncil) {
        console.log('‚úÖ [DEBUG-FIX] AI Swarm Council available');
        if (typeof window.aiSwarmCouncil.renderProviders === 'function') {
            window.aiSwarmCouncil.renderProviders();
        }
    } else {
        console.log('‚ö†Ô∏è [DEBUG-FIX] AI Swarm Council not available, using force render');
        window.forceRenderAIProviders();
    }
};

// Initialize default section when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ [DEBUG-FIX] DOM ready, initializing...');
    
    // Show dashboard by default
    setTimeout(() => {
        if (typeof window.showSection === 'function') {
            window.showSection('dashboard');
        }
    }, 100);
});

console.log('‚úÖ [DEBUG-FIX] Emergency functions loaded successfully');
console.log('‚úÖ [DEBUG-FIX] Available functions:');
console.log('- showSection:', typeof window.showSection);
console.log('- showNotification:', typeof window.showNotification);
console.log('- forceRenderAIProviders:', typeof window.forceRenderAIProviders);
console.log('- refreshAISwarmProviders:', typeof window.refreshAISwarmProviders);
console.log('- debugAISwarm:', typeof window.debugAISwarm);
console.log('- loadAISwarmData:', typeof window.loadAISwarmData);

// Add basic CSS for AI Providers table if not exists
if (!document.getElementById('ai-providers-css')) {
    const style = document.createElement('style');
    style.id = 'ai-providers-css';
    style.textContent = `
        .provider-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .provider-icon {
            font-size: 1.5em;
            width: 30px;
            text-align: center;
        }
        .provider-details h4 {
            margin: 0;
            font-size: 14px;
            font-weight: 600;
        }
        .provider-details .provider-model {
            margin: 2px 0 0 0;
            font-size: 12px;
            color: #666;
        }
        .provider-status {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
        }
        .status-dot.connected {
            background-color: #4caf50;
        }
        .status-dot.disconnected {
            background-color: #f44336;
        }
        .status-text.connected {
            color: #4caf50;
        }
        .status-text.disconnected {
            color: #f44336;
        }
        .provider-role {
            font-weight: 500;
            color: #333;
        }
        .provider-expertise {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }
        .expertise-tag {
            background-color: #e3f2fd;
            color: #1976d2;
            padding: 2px 6px;
            border-radius: 12px;
            font-size: 11px;
            white-space: nowrap;
        }
        .provider-row.connected {
            background-color: #f8fff8;
        }
        .provider-row.disconnected {
            background-color: #fff8f8;
        }
    `;
    document.head.appendChild(style);
    console.log('‚úÖ [DEBUG-FIX] AI Providers CSS added');
}
